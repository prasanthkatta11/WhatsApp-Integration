//Callout Class
public class LinkedInIntegration {
  @AuraEnabled
  public static String loginToLinkedIn() {
    Http http = new Http();

    Httprequest request = new Httprequest();
    request.setMethod('GET');
    request.setEndpoint('callout:LinkedIn_Named_Credential/v2/userinfo');
    try {
      Httpresponse response = http.send(request);
      System.debug('Response ' + response.getBody());
      if (response.getStatusCode() == 200) {
        Map<String, Object> result = (Map<String, Object>) JSON.deserializeUntyped(
          response.getBody()
        );
        System.debug('Result ' + result);
        String logonId = (String) result.get('sub');
        System.debug('logonId ' + logonId);
        return logonId;
      }
    } catch (Exception ex) {
      System.debug('Exception' + ex.getMessage());
    }
    return null;
  }

  @AuraEnabled
  public static void postToLinkedIn(String message) {
    String loginId = loginToLinkedIn();
    postMessageToLinkedIn(loginId, message);
  }

  @AuraEnabled
  public static void postMessageToLinkedIn(String loginId, String message) {
    Http http = new Http();

    Httprequest request = new Httprequest();
    request.setMethod('POST');
    request.setHeader('Content-Type', 'application/json');
    String authorPerson = 'urn:li:person:' + loginId;
    String linkedInPostBody =
      '{ ' +
      '"author": "' +
      authorPerson +
      '", ' +
      '"lifecycleState": "PUBLISHED", ' +
      '"specificContent": { ' +
      '"com.linkedin.ugc.ShareContent": { ' +
      '"shareCommentary": { ' +
      '"text": "' +
      message +
      '" ' +
      '}, ' +
      '"shareMediaCategory": "NONE" ' +
      '} ' +
      '}, ' +
      '"visibility": { ' +
      '"com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC" ' +
      '} ' +
      '}';
    request.setBody(linkedInPostBody);
    request.setEndpoint('callout:LinkedIn_Named_Credential/v2/ugcPosts');
    try {
      Httpresponse response = http.send(request);
      System.debug('BodyResponse ' + response.getBody());
      System.debug('BodyResponse ' + response.getStatusCode());
    } catch (Exception ex) {
      System.debug('Exception' + ex.getMessage());
    }
  }
}


//LinkedIn UI Display (LWC Component HTML)
<template>
    <lightning-card class="slds-var-p-around_large">
        <div class="slds-text-align_center">
            <h1 class="slds-text-heading_large slds-text-title_bold">LINKEDIN POST</h1>
        </div>
        <div class="slds-var-p-around_large">
            <div class="slds-grid slds-gutters">
                <div class="slds-col slds-size_9-of-12">
                    <lightning-textarea label="Enter your LinkedIn post:" value={message}
                        placeholder="Enter the text to post on LinkedIn" onchange={handleMessageChange}
                        class={textareaClass}>
                    </lightning-textarea>
                    <template lwc:if={showError}>
                        <p class="slds-text-color_error">
                            Please enter a message in the text area before posting.
                        </p>
                    </template>
                </div>
                <div class="slds-col slds-size_3-of-12 slds-align-bottom">
                    <lightning-button label="Post to LinkedIn" onclick={handlePost} variant="brand"></lightning-button>
                </div>
            </div>
        </div>
    </lightning-card>
    <template lwc:if={isModalOpen}>
        <c-post-to-linked-in-modal message={message} onclose={handleModalClose}
            onpost={handleModalPost}></c-post-to-linked-in-modal>
    </template>
</template>


//LinkedIn UI Display (LWC JavaScript)
import { LightningElement } from "lwc";
import { ShowToastEvent } from "lightning/platformShowToastEvent";
import POSTTOLINKEDIN from "@salesforce/apex/LinkedInIntegration.postToLinkedIn";

export default class PostToLinkedInComponent extends LightningElement {
  message = "";
  showError = false;
  textareaClass = "";
  isModalOpen = false;

  handleMessageChange(event) {
    this.message = event.target.value;
    this.showError = false;
    this.textareaClass = "";
  }

  handlePost() {
    if (!this.message.trim()) {
      this.showError = true;
      this.textareaClass = "slds-has-error";
      return;
    }
    this.isModalOpen = true;
  }

  handleModalClose() {
    this.isModalOpen = false;
  }

  async handleModalPost() {
    this.isModalOpen = false;
    try {
      const result = await POSTTOLINKEDIN({ message: this.message });
      this.message = "";
      this.showToast(
        "Success",
        "Your message has been posted to LinkedIn.",
        "success",
        "sticky"
      );
      console.log(
        "ðŸš€ ~ PostToLinkedInComponent ~ handlePost ~ result:",
        result
      );
    } catch (error) {
      this.showToast(
        "Error",
        "There was an error posting to LinkedIn.",
        "error",
        "sticky"
      );
    }
  }
  showToast(title, message, variant, mode) {
    const event = new ShowToastEvent({
      title: title,
      message: message,
      variant: variant,
      mode: mode
    });
    this.dispatchEvent(event);
  }
}


//Modal for displaying success message (LWC HTML)
<template>
    <div class="slds-modal slds-fade-in-open">
        <div class="slds-modal__container">
            <header class="slds-modal__header">
                <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close"
                    onclick={closeModal}>
                    <lightning-icon icon-name="utility:close" alternative-text="close" size="small"></lightning-icon>
                    <span class="slds-assistive-text">Close</span>
                </button>
                <h2 class="slds-text-heading_medium">Confirm LinkedIn Post</h2>
            </header>
            <div class="slds-modal__content slds-var-p-around_medium">
                <p>{message}</p>
            </div>
            <footer class="slds-modal__footer">
                <lightning-button class="slds-var-p-around_small" variant="neutral" label="Cancel"
                    onclick={closeModal}></lightning-button>
                <lightning-button class="slds-var-p-around_small" variant="brand" label="Post"
                    onclick={postMessage}></lightning-button>
            </footer>
        </div>
    </div>
    <div class="slds-backdrop slds-backdrop_open"></div>
</template>


//LWC Component Modal JS
import { LightningElement, api } from "lwc";

export default class PostToLinkedInModal extends LightningElement {
  @api message;

  closeModal() {
    this.dispatchEvent(new CustomEvent("close"));
  }

  postMessage() {
    this.dispatchEvent(new CustomEvent("post"));
  }
}
